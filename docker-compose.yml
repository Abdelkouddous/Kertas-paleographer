# ============================================================================
# KERTAS Paleographer - Docker Compose Configuration
# Orchestrates multi-container ML application deployment
# ============================================================================

version: "3.8"

services:
  # ============================================================================
  # Main Application Service - Streamlit Web UI
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kertas-paleographer
    image: kertas-paleographer:latest
    ports:
      - "8501:8501" # Streamlit default port
    volumes:
      # Mount data directory for persistence
      - ./KERTASpaleographer:/app/KERTASpaleographer:ro
      # Optional: Mount for development (hot reload)
      # - ./app.py:/app/app.py
      # - ./main.py:/app/main.py
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    restart: unless-stopped
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.kertas.description=KERTAS Paleographer ML Classification System"
      - "com.kertas.version=1.0"
      - "com.kertas.component=webapp"

  # ============================================================================
  # Optional: CLI Service for batch processing
  # ============================================================================
  cli:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kertas-cli
    image: kertas-paleographer:latest
    command: ["python", "main.py"]
    volumes:
      - ./KERTASpaleographer:/app/KERTASpaleographer:ro
    environment:
      - PYTHONUNBUFFERED=1
    stdin_open: true
    tty: true
    networks:
      - ml-network
    profiles:
      - cli # Only starts when explicitly specified
    labels:
      - "com.kertas.component=cli"

# ============================================================================
# Networks
# ============================================================================
networks:
  ml-network:
    driver: bridge
    labels:
      - "com.kertas.network=ml-infrastructure"

# ============================================================================
# Volumes (Optional: for persistent storage)
# ============================================================================
volumes:
  ml-data:
    driver: local
    labels:
      - "com.kertas.volume=data-persistence"
# ============================================================================
# Usage Examples:
# ============================================================================
#
# Start web application:
#   docker-compose up -d
#
# Start with CLI interface:
#   docker-compose --profile cli up cli
#
# View logs:
#   docker-compose logs -f app
#
# Stop all services:
#   docker-compose down
#
# Rebuild after code changes:
#   docker-compose up -d --build
#
# Scale for load balancing (requires load balancer setup):
#   docker-compose up -d --scale app=3
# ============================================================================

