#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Deployment Test Script
Tests if all imports work correctly for Streamlit Cloud deployment
"""

def test_imports():
    """Test all required imports"""
    try:
        print("Testing imports...")
        
        # Test basic imports
        import streamlit as st
        print("‚úÖ streamlit")
        
        import pandas as pd
        print("‚úÖ pandas")
        
        import numpy as np
        print("‚úÖ numpy")
        
        import matplotlib.pyplot as plt
        print("‚úÖ matplotlib")
        
        import seaborn as sns
        print("‚úÖ seaborn")
        
        from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
        print("‚úÖ sklearn.ensemble")
        
        from sklearn.svm import SVC
        print("‚úÖ sklearn.svm")
        
        from sklearn.tree import DecisionTreeClassifier
        print("‚úÖ sklearn.tree")
        
        from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
        print("‚úÖ sklearn.metrics")
        
        from sklearn.model_selection import GridSearchCV
        print("‚úÖ sklearn.model_selection")
        
        # Test plotly imports
        import plotly.graph_objects as go
        print("‚úÖ plotly.graph_objects")
        
        import plotly.express as px
        print("‚úÖ plotly.express")
        
        from plotly.subplots import make_subplots
        print("‚úÖ plotly.subplots")
        
        # Test cost function visualization
        from cost_function_visualization import CostFunctionVisualizer, generate_sample_data
        print("‚úÖ cost_function_visualization")
        
        print("\nüéâ All imports successful! Ready for deployment.")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_cost_function():
    """Test cost function functionality"""
    try:
        print("\nTesting cost function functionality...")
        
        from cost_function_visualization import CostFunctionVisualizer, generate_sample_data
        
        # Generate sample data
        X, y = generate_sample_data(n_samples=10, noise_level=1.0, random_state=42)
        print("‚úÖ Sample data generated")
        
        # Create visualizer
        visualizer = CostFunctionVisualizer(X, y)
        print("‚úÖ CostFunctionVisualizer created")
        
        # Test cost computation
        cost = visualizer.compute_cost(1.0, 0.0)
        print(f"‚úÖ Cost computation: {cost:.4f}")
        
        # Test gradient computation
        dj_dw, dj_db = visualizer.compute_gradient(1.0, 0.0)
        print(f"‚úÖ Gradient computation: dj_dw={dj_dw:.4f}, dj_db={dj_db:.4f}")
        
        print("üéâ Cost function functionality works!")
        return True
        
    except Exception as e:
        print(f"‚ùå Cost function error: {e}")
        return False

if __name__ == "__main__":
    print("="*60)
    print("STREAMLIT CLOUD DEPLOYMENT TEST")
    print("="*60)
    
    success = test_imports()
    if success:
        test_cost_function()
    
    print("\n" + "="*60)
    if success:
        print("‚úÖ READY FOR DEPLOYMENT!")
    else:
        print("‚ùå DEPLOYMENT ISSUES DETECTED")
    print("="*60)
